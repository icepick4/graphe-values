  
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package graphe.values;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.File;

import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JRadioButton;
import javax.swing.event.MouseInputListener;

import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.Desktop;

/**
 *
 * @author matis
 */
public class GUI extends javax.swing.JFrame {
    private Graphe graphe;
    private String fileName;
    public boolean opened;
    private clickNode click = new clickNode();
    private clickTwoNode clickTwoNode = new clickTwoNode();
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        this.fileName = null;
        this.opened = false;
    }
    public String getFileName(){
        return this.fileName;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        this.setMinimumSize(new Dimension(1400, 850));
        this.addMouseMotionListener(click);
        this.addMouseListener(click);
        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        toolBarPan = new javax.swing.JPanel();
        lbl_affichage = new javax.swing.JLabel();
        nbVille = new javax.swing.JLabel();
        nbRestaurant = new javax.swing.JLabel();
        nbLoisir = new javax.swing.JLabel();
        nbDepartementale = new javax.swing.JLabel();
        nbNationale = new javax.swing.JLabel();
        nbAutoroute = new javax.swing.JLabel();
        cb_ville = new javax.swing.JCheckBox();
        cb_restaurant = new javax.swing.JCheckBox();
        cb_loisirs = new javax.swing.JCheckBox();
        cb_autoroute = new javax.swing.JCheckBox();
        cb_nationale = new javax.swing.JCheckBox();
        cb_departementale = new javax.swing.JCheckBox();
        selectNoeud = new javax.swing.JRadioButton();
        resto1Distance = new javax.swing.JRadioButton();
        ville1Distance = new javax.swing.JRadioButton();
        loisir1Distance = new javax.swing.JRadioButton();
        plusCulturel = new javax.swing.JRadioButton();
        plusOuvert = new javax.swing.JRadioButton();
        plusGastro = new javax.swing.JRadioButton();
        plusCourteDistance = new javax.swing.JRadioButton();
        plusCourtChemin = new javax.swing.JRadioButton();
        est2Distance = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        Canvas = new GrapheDraw();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        modifyFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        
        jFileChooser1.setCurrentDirectory(new java.io.File(".\\inputFiles"));
        jFileChooser1.setDialogTitle("Choisissez un fichier de Graphe");
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("TXT File","txt"));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jFileChooser1ActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        //this.setResizable(false);
        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        jToolBar1.setRollover(true);

        lbl_affichage.setText("Noeuds :");

        cb_ville.setSelected(true);
        cb_ville.setText("Villes");
        cb_ville.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_villeActionPerformed(evt);
            }
        });

        cb_restaurant.setSelected(true);
        cb_restaurant.setText("Restaurants");
        cb_restaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_restaurantActionPerformed(evt);
            }
        });

        cb_loisirs.setSelected(true);
        cb_loisirs.setText("Loisirs");
        cb_loisirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_loisirsActionPerformed(evt);
            }
        });


        jLabel1.setText("Liens :");

        cb_autoroute.setSelected(false);
        cb_autoroute.setText("Autoroutes");
        cb_autoroute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_autorouteActionPerformed(evt);
            }
        });

        cb_nationale.setSelected(false);
        cb_nationale.setText("Nationales");
        cb_nationale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_nationaleActionPerformed(evt);
            }
        });

        cb_departementale.setSelected(true);
        cb_departementale.setText("Departementales");
        cb_departementale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_departementaleActionPerformed(evt);
            }
        });

        selectNoeud.setSelected(true);
        selectNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectNoeudActionPerformed(evt);
            }
        });

        plusCulturel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                plusCulturelActionPerformed(e);
            }
        });

        plusGastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                plusGastroActionPerformed(e);
            }
        });

        plusOuvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                plusOuvertActionPerformed(e);
            }
        });

        resto1Distance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                resto1DistanceActionPerformed(e);
            }
        });

        ville1Distance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                ville1DistanceActionPerformed(e);
            }
        });

        loisir1Distance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                loisir1DistanceActionPerformed(e);
            }
        });

        plusCourteDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                plusCourteDistanceActionPerformed(e);
            }
        });

        plusCourtChemin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                plusCourtCheminActionPerformed(e);
            }
        });

        est2Distance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                est2DistanceActionPerformed(e);
            }
        });

        nbVille.setText("Nombre : 0");
        nbRestaurant.setText("Nombre : 0");
        nbLoisir.setText("Nombre : 0");
        nbAutoroute.setText("Nombre : 0");
        nbNationale.setText("Nombre : 0");
        nbDepartementale.setText("Nombre : 0");

        ButtonGroup group = new ButtonGroup();
        group.add(selectNoeud);
        group.add(resto1Distance);
        group.add(ville1Distance);
        group.add(loisir1Distance);
        group.add(plusCulturel);
        group.add(plusGastro);
        group.add(plusOuvert);
        group.add(plusCourteDistance);
        group.add(plusCourtChemin);
        group.add(est2Distance);

        selectNoeud.setText("Bouger les noeuds");
        resto1Distance.setText("Resto 1 Distance");
        ville1Distance.setText("Ville 1 Distance");
        loisir1Distance.setText("Loisir 1 Distance");
        plusCulturel.setText("Plus Culturel");
        plusGastro.setText("Plus Gastronomique");
        plusOuvert.setText("Plus Ouvert");
        plusCourteDistance.setText("Plus Courte Distance (valeur)");
        plusCourtChemin.setText("Plus Court Chemin");
        est2Distance.setText("Est 2 Distance ?");

        javax.swing.GroupLayout toolBarPanLayout = new javax.swing.GroupLayout(toolBarPan);
        toolBarPan.setLayout(toolBarPanLayout);
        toolBarPanLayout.setHorizontalGroup(
            toolBarPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarPanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toolBarPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_loisirs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_restaurant, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addComponent(cb_ville, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_affichage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbVille, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbRestaurant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbLoisir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbDepartementale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbAutoroute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbNationale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(toolBarPanLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                .addContainerGap())
                .addGap(0, 0, Short.MAX_VALUE)))
                        .addComponent(cb_autoroute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cb_nationale, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                        .addComponent(cb_departementale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0,0,Short.MAX_VALUE)
                        .addComponent(selectNoeud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resto1Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ville1Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loisir1Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plusCulturel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plusGastro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plusOuvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plusCourteDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plusCourtChemin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(est2Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        toolBarPanLayout.setVerticalGroup(
            toolBarPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarPanLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lbl_affichage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_ville)
                .addComponent(nbVille)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_restaurant)
                .addComponent(nbRestaurant)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_loisirs)
                .addComponent(nbLoisir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addComponent(lbl_affichage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_autoroute)
                .addComponent(nbAutoroute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_nationale)
                .addComponent(nbNationale)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_departementale)
                .addComponent(nbDepartementale)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectNoeud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resto1Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ville1Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loisir1Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plusCulturel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plusGastro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plusOuvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plusCourteDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plusCourtChemin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(est2Distance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(421, Short.MAX_VALUE))
                
        );

        jToolBar1.add(toolBarPan);

        javax.swing.GroupLayout CanvasLayout = new javax.swing.GroupLayout(Canvas);
        Canvas.setLayout(CanvasLayout);
        CanvasLayout.setHorizontalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 864, Short.MAX_VALUE)
        );
        CanvasLayout.setVerticalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("Fichier");
        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openFile.setText("Ouvrir");
        openFile.setToolTipText("");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jMenu1.add(openFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Modifier");
        jMenu2.add(modifyFile);
        jMenuBar1.add(jMenu2);
        modifyFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        modifyFile.setText("Ouvrir");
        modifyFile.setToolTipText("");
        modifyFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    menuModifActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_jFileChooser1ActionPerformed
        this.fileName = jFileChooser1.getSelectedFile().getAbsolutePath();
        this.opened = true;
        try{
            GrapheApp.initApp();
        }
        catch(ArrayIndexOutOfBoundsException e){
            System.out.println("Le graphe ne correspond pas au format attendu (erreur de synthaxe)");
            //open a new message dialog
            JOptionPane.showMessageDialog(null, "Le graphe ne correspond pas au format attendu (erreur de synthaxe)", "Erreur", JOptionPane.ERROR_MESSAGE);
            this.setTitle("Le graphe ne correspond pas au format attendu (erreur de synthaxe)");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Le graphe ne correspond pas au format attendu : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Le graphe ne correspond pas au format attendu, erreur inconnu : " + e.getMessage());
            this.setTitle("Le graphe ne correspond pas au format attendu");
        }
        setNombres();
        jFrame1.dispose();
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        Canvas.clear();
        try{
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
            Canvas.changePos();
            Canvas.repaint();
        }
        catch(NullPointerException e){
            //pas de graphe chargé
        }
    }//GEN-LAST:event_formComponentResized

    private void selectNoeudActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(click);
        this.addMouseMotionListener(click);
    }

    private void plusCulturelActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void plusGastroActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void plusOuvertActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void resto1DistanceActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void ville1DistanceActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void loisir1DistanceActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void plusCourteDistanceActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void plusCourtCheminActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void est2DistanceActionPerformed(java.awt.event.ActionEvent evt){
        this.removeListeners();
        this.addMouseListener(clickTwoNode);
        this.addMouseMotionListener(clickTwoNode);
    }

    private void removeListeners(){
        this.removeMouseListener(click);
        this.removeMouseMotionListener(click);
        this.removeMouseListener(clickTwoNode);
        this.removeMouseMotionListener(clickTwoNode);
    }


    private void cb_villeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_villeActionPerformed
        try{
            Canvas.clear();
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Aucun graphe n'est ouvert", "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Pas de graphe");
        }
    }//GEN-LAST:event_cb_villeActionPerformed

    private void cb_restaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_restaurantActionPerformed
        try{
            Canvas.clear();
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Aucun graphe n'est ouvert", "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Pas de graphe");
        }
    }//GEN-LAST:event_cb_restaurantActionPerformed

    private void cb_loisirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_loisirsActionPerformed
        try{
            Canvas.clear();
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Aucun graphe n'est ouvert", "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Pas de graphe");
        }
    }//GEN-LAST:event_cb_loisirsActionPerformed

    private void cb_autorouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_autorouteActionPerformed
        try{
            Canvas.clear();
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Aucun graphe n'est ouvert", "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Pas de graphe");
        }
    }//GEN-LAST:event_cb_autorouteActionPerformed

    private void cb_nationaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_nationalesActionPerformed
        try{
            Canvas.clear();
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Aucun graphe n'est ouvert", "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Pas de graphe");
        }
    }//GEN-LAST:event_cb_nationalesActionPerformed

    private void cb_departementaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_departementaleActionPerformed
        try{
            Canvas.clear();
            graphe = GrapheApp.getGraphe();
            Canvas.drawGraph(graphe);
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Aucun graphe n'est ouvert", "Erreur", JOptionPane.ERROR_MESSAGE);
            System.out.println("Pas de graphe");
        }
    }//GEN-LAST:event_cb_departementaleActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {
        jFrame1.pack();
        jFrame1.setVisible(true);
    }

    private void setNombres(){
        try{
            nbVille.setText("Nombre : " + GrapheApp.getGraphe().getNbVille());
            nbRestaurant.setText("Nombre : " +  GrapheApp.getGraphe().getNbRestaurant());
            nbLoisir.setText("Nombre : " +  GrapheApp.getGraphe().getNbLoisir());
            nbAutoroute.setText("Nombre : " +  GrapheApp.getGraphe().getNbAutoroutes());
            nbNationale.setText("Nombre : " +  GrapheApp.getGraphe().getNbNationales());
            nbDepartementale.setText("Nombre : " +  GrapheApp.getGraphe().getNbDepartementales());
        }
        catch(NullPointerException e){
            nbVille.setText("Nombre : 0");
            nbRestaurant.setText("Nombre : 0");
            nbLoisir.setText("Nombre : 0");
            nbAutoroute.setText("Nombre : 0");
            nbNationale.setText("Nombre : 0");
            nbDepartementale.setText("Nombre : 0");
        }
    }

    private void menuModifActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_menuModifActionPerformed
        try{
            //constructor of file class having file as argument  
            File file = new File(this.getFileName());   
            if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not  
            {  
                JOptionPane.showMessageDialog(null, "Desktop n'est pas supporté", "Erreur", JOptionPane.ERROR_MESSAGE);  
                return;  
            }  
            Desktop desktop = Desktop.getDesktop();  
            if(file.exists()){         //checks file exists or not  
                desktop.open(file);
            }              //opens the specified file  
        }
        catch(NullPointerException e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Pas de graphe chargé", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception e){
            //open new message dialog
            JOptionPane.showMessageDialog(null, "Erreur dans l'ouverture du fichier", "Erreur", JOptionPane.ERROR_MESSAGE);
        }

        
    }//GEN-LAST:event_menuModifActionPerformed
    //getter cb
    public static JCheckBox getCb_ville() {
        return cb_ville;
    }

    public static JCheckBox getCb_restaurant() {
        return cb_restaurant;
    }

    public static JCheckBox getCb_autoroute() {
        return cb_autoroute;
    }

    public static JCheckBox getCb_nationale() {
        return cb_nationale;
    }

    public static JCheckBox getCb_departementale() {
        return cb_departementale;
    }

    public static JCheckBox getCb_loisirs() {
        return cb_loisirs;
    }

    public static JRadioButton getRb_resto1Distance(){
        return resto1Distance;
    }

    public static JRadioButton getRb_ville1Distance(){
        return ville1Distance;
    }

    public static JRadioButton getRb_loisir1Distance(){
        return loisir1Distance;
    }

    public static JRadioButton getRb_selectNoeud(){
        return selectNoeud;
    }

    public static JRadioButton getRb_plusGastro(){
        return plusGastro;
    }

    public static JRadioButton getRb_plusOuvert(){
        return plusOuvert;
    }

    public static JRadioButton getRb_plusCulturel(){
        return plusCulturel;
    }

    public static JRadioButton getRb_plusCourteDistance(){
        return plusCourteDistance;
    }

    public static JRadioButton getRb_plusCourtChemin(){
        return plusCourtChemin;
    }

    public static JRadioButton getRb_est2Distance(){
        return est2Distance;
    }

    

    public static GrapheDraw getCanvas() {
        return Canvas;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static GrapheDraw Canvas;
    private static javax.swing.JCheckBox cb_loisirs;
    private static javax.swing.JCheckBox cb_restaurant;
    private static javax.swing.JCheckBox cb_ville;
    private static javax.swing.JCheckBox cb_departementale;
    private static javax.swing.JCheckBox cb_nationale;
    private static javax.swing.JCheckBox cb_autoroute;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbl_affichage;
    private javax.swing.JLabel nbVille;
    private javax.swing.JLabel nbRestaurant;
    private javax.swing.JLabel nbAutoroute;
    private javax.swing.JLabel nbNationale;
    private javax.swing.JLabel nbDepartementale;
    private javax.swing.JLabel nbLoisir;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem modifyFile;
    private javax.swing.JPanel toolBarPan;
    private static javax.swing.JRadioButton selectNoeud;
    private static javax.swing.JRadioButton resto1Distance;
    private static javax.swing.JRadioButton ville1Distance;
    private static javax.swing.JRadioButton loisir1Distance;
    private static javax.swing.JRadioButton est2Distance;
    private static javax.swing.JRadioButton plusGastro;
    private static javax.swing.JRadioButton plusOuvert;
    private static javax.swing.JRadioButton plusCulturel;
    private static javax.swing.JRadioButton plusCourteDistance;
    private static javax.swing.JRadioButton plusCourtChemin;
    // End of variables declaration//GEN-END:variables
}

class clickNode implements MouseListener, MouseMotionListener{
    private boolean clicked = false;
    private int node = -2;

    @Override
    public void mousePressed(MouseEvent e) {
        int x = e.getX();
        int y = e.getY();
        GrapheDraw Canvas = GUI.getCanvas();
        int lastNode = this.node;
        for(int i = 0; i < Canvas.getNbNodes(); i++){
            if(x >= Canvas.getNodes().get(i).getPosX() - 50 && x <= Canvas.getNodes().get(i).getPosX() + 50 && y >= Canvas.getNodes().get(i).getPosY() + 10 && y <= Canvas.getNodes().get(i).getPosY() + 50){
                lastNode = i;
            }
        }
        if(lastNode == node){
            this.node = -1;
        }
        else{
            this.node = lastNode;
        }
        if(this.clicked){
            this.clicked = false;
        }
        else if (this.node != -1){
            this.clicked = true;
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }
    @Override
    public void mouseEntered(MouseEvent e) {
    }
    @Override
    public void mouseExited(MouseEvent e) {
    }
    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e){
        int x = e.getX();
        int y = e.getY();
        GrapheDraw Canvas = GUI.getCanvas();
        for(int i = 0; i < Canvas.getNbNodes(); i++){
            if(x >= Canvas.getNodes().get(i).getPosX() - 50 && x <= Canvas.getNodes().get(i).getPosX() + 50 && y >= Canvas.getNodes().get(i).getPosY() + 10 && y <= Canvas.getNodes().get(i).getPosY() + 50){
                try{
                    if(Canvas.getNodes().get(this.node).height < 75){
                        Canvas.getNodes().get(this.node).height = Canvas.getNodes().get(this.node).height + 5;
                    }
                    if (Canvas.getNodes().get(this.node).width < 90){
                        Canvas.getNodes().get(this.node).width = Canvas.getNodes().get(this.node).width + 5;
                    }   
                }
                catch(IndexOutOfBoundsException ee){
                    //pas de noeud selectionné
                }
                if(!this.clicked || this.node == -1){
                    if(Canvas.getNodes().get(i).height < 75){
                        Canvas.getNodes().get(i).height = Canvas.getNodes().get(i).height + 5;
                    }
                    if (Canvas.getNodes().get(i).width < 90){
                        Canvas.getNodes().get(i).width = Canvas.getNodes().get(i).width + 5;
                    }
                } 
            }
            else if (this.clicked){
                try{
                    if(Canvas.getNodes().get(this.node).height < 75){
                        Canvas.getNodes().get(this.node).height = 75;
                    }
                    if (Canvas.getNodes().get(this.node).width < 90){
                        Canvas.getNodes().get(this.node).width = 90;
                    }
                }
                catch(IndexOutOfBoundsException ee){
                    //pas de noeud selectionné
                }
                Canvas.getNodes().get(i).resetSize();
            }
            else{
                Canvas.getNodes().get(i).resetSize();
            }
        }
        if(clicked){
            try{
                Canvas.getNodes().get(this.node).setPosX(x);
                Canvas.getNodes().get(this.node).setPosY(y - 35);
            }
            catch(IndexOutOfBoundsException ee){
                //pas de noeud selectionné
            }
        }  
        Canvas.repaint();     
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }
}

class clickTwoNode implements MouseListener, MouseMotionListener{
    private int[] node = {-1, -1};

    private int stateNode = 0;
    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        int x = e.getX();
        int y = e.getY();
        GrapheDraw Canvas = GUI.getCanvas();
        int lastNode = -1;
        for(int i = 0; i < Canvas.getNbNodes(); i++){
            if(x >= Canvas.getNodes().get(i).getPosX() - 50 && x <= Canvas.getNodes().get(i).getPosX() + 50 && y >= Canvas.getNodes().get(i).getPosY() + 10 && y <= Canvas.getNodes().get(i).getPosY() + 50){
                lastNode = i;
            }
        }
        if(lastNode != this.node[0] && lastNode != this.node[1]){
            if(this.stateNode == 0){
                this.node[stateNode] = lastNode;
                this.stateNode = 1;
            }
            else if (this.stateNode == 1){
                this.node[stateNode] = lastNode;
                this.stateNode = 2;
                if(GUI.getRb_plusCulturel().isSelected()){
                    //print return of the function plusCulturelle in Graphe in a new messageDialog
                    int result = GrapheApp.getGraphe().plusCulturelle(Canvas.getNodes().get(this.node[0]).getName(),  Canvas.getNodes().get(this.node[1]).getName());
                    System.out.print(result);
                    if(result == 1){
                        JOptionPane.showMessageDialog(null, Canvas.getNodes().get(this.node[0]).getName() + " est plus culturel que " + Canvas.getNodes().get(this.node[1]).getName());
                    }
                    else if (result == 0){
                        JOptionPane.showMessageDialog(null, Canvas.getNodes().get(this.node[0]).getName() + " n'est pas plus culturel que " + Canvas.getNodes().get(this.node[1]).getName());
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds ne sont pas à 2 distance d'au moins un centre de loisir");
                    }
                }
                else if(GUI.getRb_plusGastro().isSelected()){
                    //print return of the function plusGastro in Graphe in a new messageDialog
                    int result = GrapheApp.getGraphe().plusGastronomique( Canvas.getNodes().get(this.node[0]).getName(),  Canvas.getNodes().get(this.node[1]).getName());
                    if(result == 1){
                        JOptionPane.showMessageDialog(null, Canvas.getNodes().get(this.node[0]).getName() + " est plus gastronomique que " + Canvas.getNodes().get(this.node[1]).getName());
                    }
                    else if (result == 0){
                        JOptionPane.showMessageDialog(null, Canvas.getNodes().get(this.node[0]).getName() + " n'est pas plus gastronomique que " + Canvas.getNodes().get(this.node[1]).getName());
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds ne sont pas à 2 distance d'au moins un restaurant");
                    }
                }
                else if(GUI.getRb_plusOuvert().isSelected()){
                    //print return of the function plusOuverte in Graphe in a new messageDialog
                    int result = GrapheApp.getGraphe().plusOuverte( Canvas.getNodes().get(this.node[0]).getName(), Canvas.getNodes().get(this.node[1]).getName());
                    if(result == 1){
                        JOptionPane.showMessageDialog(null, Canvas.getNodes().get(this.node[0]).getName() + " est plus ouvert que " + Canvas.getNodes().get(this.node[1]).getName());
                    }
                    else if (result == 0){
                        JOptionPane.showMessageDialog(null, Canvas.getNodes().get(this.node[0]).getName() + " n'est pas plus ouvert que " + Canvas.getNodes().get(this.node[1]).getName());
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds ne sont pas à 2 distance d'au moins une ville");
                    }
                }
                else if(GUI.getRb_plusCourteDistance().isSelected()){
                    //print return of the function plusCourtChemin in Graphe in a new messageDialog
                    double result = GrapheApp.getGraphe().plusCourtChemin(this.node[0],this.node[1]);
                    if(result != 0){
                        JOptionPane.showMessageDialog(null, "Le plus court chemin entre " + Canvas.getNodes().get(this.node[0]).getName() + " et " + Canvas.getNodes().get(this.node[1]).getName() + " est de " + result);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds ne sont pas reliés");
                    }

                }
                else if (GUI.getRb_plusCourtChemin().isSelected()){
                    //print return of the function floydWarshallChemin in Graphe in a new messageDialog
                    ArrayList<Integer> result = GrapheApp.getGraphe().floydWarshallChemin(this.node[0],this.node[1]);
                    //browse result and print the path
                    if(result.size() != 0){
                        String path = "Le plus court chemin entre " + Canvas.getNodes().get(this.node[0]).getName() + " et " + Canvas.getNodes().get(this.node[1]).getName() + " est : " + "\n";
                        for(int i = 0; i < result.size() - 1; i++){
                            path += Canvas.getNodes().get(result.get(i)).getName() + " -> ";
                        }
                        path += Canvas.getNodes().get(result.get(result.size() - 1)).getName();
                        JOptionPane.showMessageDialog(null, path);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds ne sont pas reliés");
                    }
                }
                else if (GUI.getRb_est2Distance().isSelected()){
                    //print return of distance2 in Graphe in a new messageDialog
                    boolean result = GrapheApp.getGraphe().distance2(this.node[0],this.node[1]);
                    if(result){
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds sont à 2 distance l'un de l'autre");
                    }
                    else if (!result){
                        JOptionPane.showMessageDialog(null, "Ces deux noeuds ne sont pas à 2 distance l'un de l'autre");
                    }
                }
            }
            else if (this.stateNode == 2){
                this.stateNode = 0;
                //reset this.node
                this.node[0] = -1;
                this.node[1] = -1;
                this.node[stateNode] = lastNode;
                this.stateNode = 1;
            }
        }
        if (GUI.getRb_resto1Distance().isSelected()){
            //print ArrayList of the function rDistance1 in Graphe in a new messageDialog
            ArrayList<String> result = GrapheApp.getGraphe().Rdistance1(Canvas.getNodes().get(this.node[stateNode-1]).getName());
            if(result.size() == 0){
                JOptionPane.showMessageDialog(null, "Le noeud " +  Canvas.getNodes().get(this.node[stateNode-1]).getName() + " n'est pas à 1 distance d'au moins un restaurant");
            }
            else{
                String message = "";
                message += "Le(s) restaurant(s) relié(s) à " + Canvas.getNodes().get(this.node[stateNode-1]).getName() + " est/sont : " + "\n\n";
                for(int i = 0; i < result.size(); i++){
                    message += "-" + result.get(i) + "\n";
                }
                JOptionPane.showMessageDialog(null, message);
            }
        }
        else if(GUI.getRb_ville1Distance().isSelected()){
            //print ArrayList of the function vDistance1 in Graphe in a new messageDialog
            ArrayList<String> result = GrapheApp.getGraphe().Vdistance1(Canvas.getNodes().get(this.node[stateNode-1]).getName());
            if(result.size() == 0){
                JOptionPane.showMessageDialog(null, "Le noeud " +  Canvas.getNodes().get(this.node[stateNode-1]).getName() + " n'est pas à 1 distance d'au moins une ville");
            }
            else{
                String message = "";
                message += "La(les) ville(s) relié(s) à " + Canvas.getNodes().get(this.node[stateNode-1]).getName() + " est/sont : " + "\n\n";
                for(int i = 0; i < result.size(); i++){
                    message += "-" + result.get(i) + "\n";
                }
                JOptionPane.showMessageDialog(null, message);
            }
        }
        else if(GUI.getRb_loisir1Distance().isSelected()){
            //print ArrayList of the function lDistance1 in Graphe in a new messageDialog
            ArrayList<String> result = GrapheApp.getGraphe().Ldistance1(Canvas.getNodes().get(this.node[stateNode-1]).getName());
            if(result.size() == 0){
                JOptionPane.showMessageDialog(null, "Le noeud " +  Canvas.getNodes().get(this.node[stateNode-1]).getName() + " n'est pas à 1 distance d'au moins un centre de loisir");
            }
            else{
                String message = "";
                message += "Le(s) centre(s) de loisir relié(s) à " + Canvas.getNodes().get(this.node[stateNode-1]).getName() + " est/sont : " + "\n\n";
                for(int i = 0; i < result.size(); i++){
                    message += "-" + result.get(i) + "\n";
                }
                JOptionPane.showMessageDialog(null, message);
            }
        }
    }

        
}
